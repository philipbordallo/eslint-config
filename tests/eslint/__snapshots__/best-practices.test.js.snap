// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ESLint best practices should fail 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 416,
    "line": 2,
    "message": "File has too many classes (3). Maximum allowed is 1.",
    "messageId": "maximumExceeded",
    "nodeType": "Program",
    "ruleId": "max-classes-per-file",
    "severity": 2,
  },
  Object {
    "column": 8,
    "endColumn": 4,
    "endLine": 8,
    "fix": Object {
      "range": Array [
        56,
        148,
      ],
      "text": "number => {
  if (number < 2) {
    return number;
  }
  
    return number + 1;
  
}",
    },
    "line": 6,
    "message": "Unnecessary 'else' after 'return'.",
    "messageId": "unexpected",
    "nodeType": "BlockStatement",
    "ruleId": "no-else-return",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 22,
    "endLine": 14,
    "line": 14,
    "message": "All 'var' declarations must be at the top of the function scope.",
    "messageId": "top",
    "nodeType": "VariableDeclaration",
    "ruleId": "vars-on-top",
    "severity": 2,
  },
  Object {
    "column": 15,
    "endColumn": 20,
    "endLine": 17,
    "line": 17,
    "message": "'build' used outside of binding context.",
    "messageId": "outOfScope",
    "nodeType": "Identifier",
    "ruleId": "block-scoped-var",
    "severity": 2,
  },
  Object {
    "column": 7,
    "endColumn": 4,
    "endLine": 24,
    "line": 22,
    "message": "Expected 'this' to be used by class method 'honk'.",
    "messageId": "missingThis",
    "nodeType": "FunctionExpression",
    "ruleId": "class-methods-use-this",
    "severity": 2,
  },
  Object {
    "column": 1,
    "fix": Object {
      "range": Array [
        368,
        382,
      ],
      "text": "{doSomething();}",
    },
    "line": 28,
    "message": "Expected { after 'if' condition.",
    "messageId": "missingCurlyAfterCondition",
    "nodeType": "IfStatement",
    "ruleId": "curly",
    "severity": 2,
  },
  Object {
    "column": 1,
    "fix": Object {
      "range": Array [
        390,
        408,
      ],
      "text": "{doSomethingElse();}",
    },
    "line": 30,
    "message": "Expected { after 'else'.",
    "messageId": "missingCurlyAfter",
    "nodeType": "IfStatement",
    "ruleId": "curly",
    "severity": 2,
  },
  Object {
    "column": 1,
    "fix": Object {
      "range": Array [
        419,
        438,
      ],
      "text": "{foo(
  bar,
  baz);}",
    },
    "line": 33,
    "message": "Expected { after 'if' condition.",
    "messageId": "missingCurlyAfterCondition",
    "nodeType": "IfStatement",
    "ruleId": "curly",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 42,
    "line": 38,
    "message": "Expected a default case.",
    "messageId": "missingDefaultCase",
    "nodeType": "SwitchStatement",
    "ruleId": "default-case",
    "severity": 2,
  },
  Object {
    "column": 13,
    "endColumn": 20,
    "endLine": 45,
    "fix": Object {
      "range": Array [
        535,
        544,
      ],
      "text": ".class",
    },
    "line": 45,
    "message": "[\\"class\\"] is better written in dot notation.",
    "messageId": "useDot",
    "nodeType": "Literal",
    "ruleId": "dot-notation",
    "severity": 2,
  },
  Object {
    "column": 20,
    "fix": Object {
      "range": Array [
        582,
        584,
      ],
      "text": "
.",
    },
    "line": 48,
    "message": "Expected dot to be on same line as property.",
    "messageId": "expectedDotBeforeProperty",
    "nodeType": "MemberExpression",
    "ruleId": "dot-location",
    "severity": 2,
  },
  Object {
    "column": 5,
    "line": 53,
    "message": "Expected '===' and instead saw '=='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 7,
    "line": 54,
    "message": "Expected '===' and instead saw '=='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 11,
    "line": 55,
    "message": "Expected '!==' and instead saw '!='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 9,
    "line": 56,
    "message": "Expected '===' and instead saw '=='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 14,
    "fix": Object {
      "range": Array [
        694,
        696,
      ],
      "text": "===",
    },
    "line": 57,
    "message": "Expected '===' and instead saw '=='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 11,
    "fix": Object {
      "range": Array [
        722,
        724,
      ],
      "text": "!==",
    },
    "line": 58,
    "message": "Expected '!==' and instead saw '!='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 67,
    "line": 65,
    "message": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.",
    "messageId": "wrap",
    "nodeType": "ForInStatement",
    "ruleId": "guard-for-in",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 15,
    "endLine": 73,
    "line": 73,
    "message": "Unexpected alert.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-alert",
    "severity": 1,
  },
  Object {
    "column": 1,
    "endColumn": 25,
    "endLine": 75,
    "line": 75,
    "message": "Unexpected confirm.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-alert",
    "severity": 1,
  },
  Object {
    "column": 1,
    "endColumn": 40,
    "endLine": 77,
    "line": 77,
    "message": "Unexpected prompt.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-alert",
    "severity": 1,
  },
  Object {
    "column": 3,
    "endColumn": 19,
    "endLine": 85,
    "line": 85,
    "message": "Avoid arguments.callee.",
    "messageId": "unexpected",
    "nodeType": "MemberExpression",
    "ruleId": "no-caller",
    "severity": 2,
  },
  Object {
    "column": 25,
    "endColumn": 41,
    "endLine": 89,
    "line": 89,
    "message": "Avoid arguments.callee.",
    "messageId": "unexpected",
    "nodeType": "MemberExpression",
    "ruleId": "no-caller",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 15,
    "endLine": 95,
    "line": 95,
    "message": "Unexpected lexical declaration in case block.",
    "messageId": "unexpected",
    "nodeType": "VariableDeclaration",
    "ruleId": "no-case-declarations",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 17,
    "endLine": 98,
    "line": 98,
    "message": "Unexpected lexical declaration in case block.",
    "messageId": "unexpected",
    "nodeType": "VariableDeclaration",
    "ruleId": "no-case-declarations",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 20,
    "endLine": 101,
    "line": 101,
    "message": "Unexpected lexical declaration in case block.",
    "messageId": "unexpected",
    "nodeType": "FunctionDeclaration",
    "ruleId": "no-case-declarations",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 15,
    "endLine": 104,
    "line": 104,
    "message": "Unexpected lexical declaration in case block.",
    "messageId": "unexpected",
    "nodeType": "ClassDeclaration",
    "ruleId": "no-case-declarations",
    "severity": 2,
  },
  Object {
    "column": 10,
    "line": 108,
    "message": "Expected to return a value at the end of function 'fooReturn'.",
    "messageId": "missingReturn",
    "nodeType": "FunctionDeclaration",
    "ruleId": "consistent-return",
    "severity": 2,
  },
  Object {
    "column": 10,
    "endColumn": 4,
    "endLine": 113,
    "fix": Object {
      "range": Array [
        1381,
        1509,
      ],
      "text": "function fooReturn() {
  if (error) {
      return 'It failed';
  } if (loading) {
      return \`It's still loading\`;
  }
}",
    },
    "line": 111,
    "message": "Unnecessary 'else' after 'return'.",
    "messageId": "unexpected",
    "nodeType": "IfStatement",
    "ruleId": "no-else-return",
    "severity": 2,
  },
  Object {
    "column": 25,
    "line": 123,
    "message": "Unexpected empty generator function 'fooEmptyGen'.",
    "messageId": "unexpected",
    "nodeType": "FunctionDeclaration",
    "ruleId": "no-empty-function",
    "severity": 2,
  },
  Object {
    "column": 36,
    "line": 125,
    "message": "Unexpected empty generator function.",
    "messageId": "unexpected",
    "nodeType": "FunctionExpression",
    "ruleId": "no-empty-function",
    "severity": 2,
  },
  Object {
    "column": 25,
    "line": 130,
    "message": "Unexpected empty generator method 'fooEmpty'.",
    "messageId": "unexpected",
    "nodeType": "FunctionExpression",
    "ruleId": "no-empty-function",
    "severity": 2,
  },
  Object {
    "column": 15,
    "line": 134,
    "message": "Unexpected empty generator method 'fooEmpty'.",
    "messageId": "unexpected",
    "nodeType": "FunctionExpression",
    "ruleId": "no-empty-function",
    "severity": 2,
  },
  Object {
    "column": 18,
    "line": 136,
    "message": "Unexpected empty getter 'fooEmpty'.",
    "messageId": "unexpected",
    "nodeType": "FunctionExpression",
    "ruleId": "no-empty-function",
    "severity": 2,
  },
  Object {
    "column": 23,
    "line": 138,
    "message": "Unexpected empty setter 'fooEmpty'.",
    "messageId": "unexpected",
    "nodeType": "FunctionExpression",
    "ruleId": "no-empty-function",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 7,
    "endLine": 142,
    "line": 142,
    "message": "Unexpected empty object pattern.",
    "messageId": "unexpected",
    "nodeType": "ObjectPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 7,
    "endLine": 143,
    "line": 143,
    "message": "Unexpected empty array pattern.",
    "messageId": "unexpected",
    "nodeType": "ArrayPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 9,
    "endColumn": 11,
    "endLine": 144,
    "line": 144,
    "message": "Unexpected empty object pattern.",
    "messageId": "unexpected",
    "nodeType": "ObjectPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 9,
    "endColumn": 11,
    "endLine": 145,
    "line": 145,
    "message": "Unexpected empty array pattern.",
    "messageId": "unexpected",
    "nodeType": "ArrayPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 26,
    "endColumn": 28,
    "endLine": 146,
    "line": 146,
    "message": "Unexpected empty object pattern.",
    "messageId": "unexpected",
    "nodeType": "ObjectPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 29,
    "endColumn": 31,
    "endLine": 147,
    "line": 147,
    "message": "Unexpected empty array pattern.",
    "messageId": "unexpected",
    "nodeType": "ArrayPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 35,
    "endColumn": 37,
    "endLine": 148,
    "line": 148,
    "message": "Unexpected empty object pattern.",
    "messageId": "unexpected",
    "nodeType": "ObjectPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 34,
    "endColumn": 36,
    "endLine": 149,
    "line": 149,
    "message": "Unexpected empty array pattern.",
    "messageId": "unexpected",
    "nodeType": "ArrayPattern",
    "ruleId": "no-empty-pattern",
    "severity": 2,
  },
  Object {
    "column": 1,
    "line": 152,
    "message": "eval can be harmful.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-eval",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 25,
    "endLine": 155,
    "line": 155,
    "message": "Object prototype is read only, properties should not be added.",
    "messageId": "unexpected",
    "nodeType": "AssignmentExpression",
    "ruleId": "no-extend-native",
    "severity": 2,
  },
  Object {
    "column": 3,
    "fix": Object {
      "range": Array [
        2227,
        2237,
      ],
      "text": "",
    },
    "line": 160,
    "message": "The function binding is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-extra-bind",
    "severity": 2,
  },
  Object {
    "column": 4,
    "fix": Object {
      "range": Array [
        2282,
        2292,
      ],
      "text": "",
    },
    "line": 164,
    "message": "The function binding is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-extra-bind",
    "severity": 2,
  },
  Object {
    "column": 4,
    "fix": Object {
      "range": Array [
        2344,
        2354,
      ],
      "text": "",
    },
    "line": 168,
    "message": "The function binding is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-extra-bind",
    "severity": 2,
  },
  Object {
    "column": 3,
    "fix": Object {
      "range": Array [
        2430,
        2440,
      ],
      "text": "",
    },
    "line": 172,
    "message": "The function binding is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-extra-bind",
    "severity": 2,
  },
  Object {
    "column": 3,
    "fix": Object {
      "range": Array [
        2524,
        2534,
      ],
      "text": "",
    },
    "line": 178,
    "message": "The function binding is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "CallExpression",
    "ruleId": "no-extra-bind",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 185,
    "line": 183,
    "message": "Unexpected labeled statement.",
    "nodeType": "LabeledStatement",
    "ruleId": "no-labels",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 11,
    "endLine": 184,
    "line": 184,
    "message": "Unexpected label in break statement.",
    "nodeType": "BreakStatement",
    "ruleId": "no-labels",
    "severity": 2,
  },
  Object {
    "column": 9,
    "endColumn": 10,
    "endLine": 184,
    "fix": Object {
      "range": Array [
        2610,
        2612,
      ],
      "text": "",
    },
    "line": 184,
    "message": "This label 'A' is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "Identifier",
    "ruleId": "no-extra-label",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 189,
    "line": 187,
    "message": "Unexpected labeled statement.",
    "nodeType": "LabeledStatement",
    "ruleId": "no-labels",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 11,
    "endLine": 188,
    "line": 188,
    "message": "Unexpected label in break statement.",
    "nodeType": "BreakStatement",
    "ruleId": "no-labels",
    "severity": 2,
  },
  Object {
    "column": 9,
    "endColumn": 10,
    "endLine": 188,
    "fix": Object {
      "range": Array [
        2658,
        2660,
      ],
      "text": "",
    },
    "line": 188,
    "message": "This label 'B' is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "Identifier",
    "ruleId": "no-extra-label",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 196,
    "line": 191,
    "message": "Unexpected labeled statement.",
    "nodeType": "LabeledStatement",
    "ruleId": "no-labels",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 13,
    "endLine": 193,
    "line": 193,
    "message": "Unexpected label in break statement.",
    "nodeType": "BreakStatement",
    "ruleId": "no-labels",
    "severity": 2,
  },
  Object {
    "column": 11,
    "endColumn": 12,
    "endLine": 193,
    "fix": Object {
      "range": Array [
        2700,
        2702,
      ],
      "text": "",
    },
    "line": 193,
    "message": "This label 'C' is unnecessary.",
    "messageId": "unexpected",
    "nodeType": "Identifier",
    "ruleId": "no-extra-label",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 12,
    "endLine": 203,
    "line": 203,
    "message": "Expected a 'break' statement before 'case'.",
    "messageId": "case",
    "nodeType": "SwitchCase",
    "ruleId": "no-fallthrough",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 13,
    "endLine": 205,
    "line": 205,
    "message": "Expected a 'break' statement before 'default'.",
    "messageId": "default",
    "nodeType": "SwitchCase",
    "ruleId": "no-fallthrough",
    "severity": 2,
  },
  Object {
    "column": 17,
    "endColumn": 19,
    "endLine": 210,
    "fix": Object {
      "range": Array [
        2876,
        2876,
      ],
      "text": "0",
    },
    "line": 210,
    "message": "A leading decimal point can be confused with a dot.",
    "messageId": "leading",
    "nodeType": "Literal",
    "ruleId": "no-floating-decimal",
    "severity": 2,
  },
  Object {
    "column": 16,
    "endColumn": 18,
    "endLine": 211,
    "fix": Object {
      "range": Array [
        2897,
        2897,
      ],
      "text": "0",
    },
    "line": 211,
    "message": "A trailing decimal point can be confused with a dot.",
    "messageId": "trailing",
    "nodeType": "Literal",
    "ruleId": "no-floating-decimal",
    "severity": 2,
  },
  Object {
    "column": 27,
    "endColumn": 29,
    "endLine": 212,
    "fix": Object {
      "range": Array [
        2925,
        2925,
      ],
      "text": "0",
    },
    "line": 212,
    "message": "A leading decimal point can be confused with a dot.",
    "messageId": "leading",
    "nodeType": "Literal",
    "ruleId": "no-floating-decimal",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 7,
    "endLine": 215,
    "line": 215,
    "message": "Read-only global 'window' should not be modified.",
    "nodeType": "Identifier",
    "ruleId": "no-global-assign",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 7,
    "endLine": 216,
    "line": 216,
    "message": "Read-only global 'length' should not be modified.",
    "nodeType": "Identifier",
    "ruleId": "no-global-assign",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 4,
    "endLine": 217,
    "line": 217,
    "message": "Read-only global 'top' should not be modified.",
    "nodeType": "Identifier",
    "ruleId": "no-global-assign",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 27,
    "endLine": 220,
    "fix": Object {
      "range": Array [
        3030,
        3035,
      ],
      "text": "Boolean(foo)",
    },
    "line": 220,
    "message": "use \`Boolean(foo)\` instead.",
    "nodeType": "UnaryExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 39,
    "endLine": 221,
    "line": 221,
    "message": "use \`foo.indexOf(\\".\\") !== -1\` instead.",
    "nodeType": "UnaryExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 24,
    "endColumn": 28,
    "endLine": 222,
    "fix": Object {
      "range": Array [
        3100,
        3104,
      ],
      "text": "Number(foo)",
    },
    "line": 222,
    "message": "use \`Number(foo)\` instead.",
    "nodeType": "UnaryExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 24,
    "endColumn": 31,
    "endLine": 223,
    "fix": Object {
      "range": Array [
        3129,
        3136,
      ],
      "text": "Number(foo)",
    },
    "line": 223,
    "message": "use \`Number(foo)\` instead.",
    "nodeType": "BinaryExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 24,
    "endColumn": 32,
    "endLine": 225,
    "fix": Object {
      "range": Array [
        3162,
        3170,
      ],
      "text": "String(foo)",
    },
    "line": 225,
    "message": "use \`String(foo)\` instead.",
    "nodeType": "BinaryExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 24,
    "endColumn": 32,
    "endLine": 226,
    "fix": Object {
      "range": Array [
        3195,
        3203,
      ],
      "text": "String(foo)",
    },
    "line": 226,
    "message": "use \`String(foo)\` instead.",
    "nodeType": "BinaryExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 10,
    "endLine": 227,
    "fix": Object {
      "range": Array [
        3205,
        3214,
      ],
      "text": "foo = String(foo)",
    },
    "line": 227,
    "message": "use \`foo = String(foo)\` instead.",
    "nodeType": "AssignmentExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 10,
    "endLine": 228,
    "fix": Object {
      "range": Array [
        3216,
        3225,
      ],
      "text": "foo = String(foo)",
    },
    "line": 228,
    "message": "use \`foo = String(foo)\` instead.",
    "nodeType": "AssignmentExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 33,
    "endLine": 231,
    "line": 231,
    "message": "Implied eval. Consider passing a function instead of a string.",
    "nodeType": "CallExpression",
    "ruleId": "no-implied-eval",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 34,
    "endLine": 232,
    "line": 232,
    "message": "Implied eval. Consider passing a function instead of a string.",
    "nodeType": "CallExpression",
    "ruleId": "no-implied-eval",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 27,
    "endLine": 233,
    "line": 233,
    "message": "Implied eval. Consider passing a function instead of a string.",
    "nodeType": "CallExpression",
    "ruleId": "no-implied-eval",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 35,
    "endLine": 234,
    "line": 234,
    "message": "Implied eval. Consider passing a function instead of a string.",
    "nodeType": "CallExpression",
    "ruleId": "no-implied-eval",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 36,
    "endLine": 235,
    "line": 235,
    "message": "Implied eval. Consider passing a function instead of a string.",
    "nodeType": "CallExpression",
    "ruleId": "no-implied-eval",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 27,
    "endLine": 238,
    "line": 238,
    "message": "Reserved name '__iterator__'.",
    "nodeType": "MemberExpression",
    "ruleId": "no-iterator",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 17,
    "endLine": 241,
    "line": 241,
    "message": "Reserved name '__iterator__'.",
    "nodeType": "MemberExpression",
    "ruleId": "no-iterator",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 3,
    "endLine": 244,
    "line": 244,
    "message": "Block is redundant.",
    "nodeType": "BlockStatement",
    "ruleId": "no-lone-blocks",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 247,
    "line": 245,
    "message": "Block is redundant.",
    "nodeType": "BlockStatement",
    "ruleId": "no-lone-blocks",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 29,
    "endLine": 252,
    "line": 252,
    "message": "Function declared in a loop contains unsafe references to variable(s) 'i'.",
    "messageId": "unsafeRefs",
    "nodeType": "FunctionDeclaration",
    "ruleId": "no-loop-func",
    "severity": 2,
  },
  Object {
    "column": 16,
    "endColumn": 47,
    "endLine": 258,
    "line": 258,
    "message": "Function declared in a loop contains unsafe references to variable(s) 'modifiedItem'.",
    "messageId": "unsafeRefs",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "no-loop-func",
    "severity": 2,
  },
  Object {
    "column": 25,
    "fix": Object {
      "range": Array [
        3866,
        3871,
      ],
      "text": " ",
    },
    "line": 263,
    "message": "Multiple spaces found before '='.",
    "nodeType": "Punctuator",
    "ruleId": "no-multi-spaces",
    "severity": 2,
  },
  Object {
    "column": 24,
    "endColumn": 19,
    "endLine": 267,
    "line": 266,
    "message": "Multiline support is limited to browsers supporting ES5 only.",
    "nodeType": "Literal",
    "ruleId": "no-multi-str",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 13,
    "endLine": 270,
    "line": 270,
    "message": "Do not use 'new' for side effects.",
    "nodeType": "ExpressionStatement",
    "ruleId": "no-new",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 36,
    "endLine": 273,
    "line": 273,
    "message": "The Function constructor is eval.",
    "nodeType": "NewExpression",
    "ruleId": "no-new-func",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 276,
    "line": 276,
    "message": "Do not use String as a constructor.",
    "nodeType": "NewExpression",
    "ruleId": "no-new-wrappers",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 277,
    "line": 277,
    "message": "Do not use Number as a constructor.",
    "nodeType": "NewExpression",
    "ruleId": "no-new-wrappers",
    "severity": 2,
  },
  Object {
    "column": 21,
    "endColumn": 32,
    "endLine": 278,
    "line": 278,
    "message": "Do not use Boolean as a constructor.",
    "nodeType": "NewExpression",
    "ruleId": "no-new-wrappers",
    "severity": 2,
  },
  Object {
    "column": 13,
    "endColumn": 16,
    "endLine": 281,
    "line": 281,
    "message": "Octal literals should not be used.",
    "nodeType": "Literal",
    "ruleId": "no-octal",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 24,
    "endLine": 282,
    "line": 282,
    "message": "Octal literals should not be used.",
    "nodeType": "Literal",
    "ruleId": "no-octal",
    "severity": 2,
  },
  Object {
    "column": 21,
    "endColumn": 37,
    "endLine": 285,
    "line": 285,
    "message": "Don't use octal: '\\\\251'. Use '\\\\u....' instead.",
    "nodeType": "Literal",
    "ruleId": "no-octal-escape",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 6,
    "endLine": 289,
    "line": 289,
    "message": "Assignment to function parameter 'bar'.",
    "nodeType": "Identifier",
    "ruleId": "no-param-reassign",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 6,
    "endLine": 293,
    "line": 293,
    "message": "Assignment to function parameter 'bar'.",
    "nodeType": "Identifier",
    "ruleId": "no-param-reassign",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 14,
    "endLine": 297,
    "line": 297,
    "message": "The '__proto__' property is deprecated.",
    "nodeType": "MemberExpression",
    "ruleId": "no-proto",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 16,
    "endLine": 300,
    "line": 300,
    "message": "'window.isFinite' is restricted from being used. Please use Number.isFinite instead",
    "nodeType": "MemberExpression",
    "ruleId": "no-restricted-properties",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 13,
    "endLine": 301,
    "line": 301,
    "message": "'window.isNaN' is restricted from being used. Please use Number.isNaN instead",
    "nodeType": "MemberExpression",
    "ruleId": "no-restricted-properties",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 21,
    "endLine": 303,
    "line": 303,
    "message": "'__defineGetter__' is restricted from being used. Please use Object.defineProperty instead.",
    "nodeType": "MemberExpression",
    "ruleId": "no-restricted-properties",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 21,
    "endLine": 304,
    "line": 304,
    "message": "'__defineSetter__' is restricted from being used. Please use Object.defineProperty instead.",
    "nodeType": "MemberExpression",
    "ruleId": "no-restricted-properties",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 9,
    "endLine": 306,
    "line": 306,
    "message": "'Math.pow' is restricted from being used. Use the exponentiation operator (**) instead.",
    "nodeType": "MemberExpression",
    "ruleId": "no-restricted-properties",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 24,
    "endLine": 310,
    "line": 310,
    "message": "Return statement should not contain assignment.",
    "nodeType": "ReturnStatement",
    "ruleId": "no-return-assign",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 19,
    "endLine": 314,
    "line": 314,
    "message": "Return statement should not contain assignment.",
    "nodeType": "ReturnStatement",
    "ruleId": "no-return-assign",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 28,
    "endLine": 318,
    "line": 318,
    "message": "Return statement should not contain assignment.",
    "nodeType": "ReturnStatement",
    "ruleId": "no-return-assign",
    "severity": 2,
  },
  Object {
    "column": 12,
    "endColumn": 38,
    "endLine": 323,
    "line": 323,
    "message": "Redundant use of \`await\` on a return value.",
    "nodeType": "Identifier",
    "ruleId": "no-return-await",
    "severity": 2,
  },
  Object {
    "column": 17,
    "endColumn": 37,
    "endLine": 327,
    "line": 327,
    "message": "Script URL is a form of eval.",
    "nodeType": "Literal",
    "ruleId": "no-script-url",
    "severity": 2,
  },
  Object {
    "column": 7,
    "endColumn": 10,
    "endLine": 330,
    "line": 330,
    "message": "'foo' is assigned to itself.",
    "nodeType": "Identifier",
    "ruleId": "no-self-assign",
    "severity": 2,
  },
  Object {
    "column": 11,
    "endColumn": 12,
    "endLine": 332,
    "line": 332,
    "message": "'a' is assigned to itself.",
    "nodeType": "Identifier",
    "ruleId": "no-self-assign",
    "severity": 2,
  },
  Object {
    "column": 14,
    "endColumn": 15,
    "endLine": 332,
    "line": 332,
    "message": "'b' is assigned to itself.",
    "nodeType": "Identifier",
    "ruleId": "no-self-assign",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 21,
    "endLine": 334,
    "line": 334,
    "message": "'b' is assigned to itself.",
    "nodeType": "Identifier",
    "ruleId": "no-self-assign",
    "severity": 2,
  },
  Object {
    "column": 12,
    "endColumn": 13,
    "endLine": 336,
    "line": 336,
    "message": "'a' is assigned to itself.",
    "nodeType": "Identifier",
    "ruleId": "no-self-assign",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 34,
    "endLine": 340,
    "line": 340,
    "message": "Comparing to itself is potentially pointless.",
    "nodeType": "BinaryExpression",
    "ruleId": "no-self-compare",
    "severity": 2,
  },
  Object {
    "column": 18,
    "line": 345,
    "message": "Unexpected use of comma operator.",
    "nodeType": "SequenceExpression",
    "ruleId": "no-sequences",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 9,
    "endLine": 349,
    "line": 349,
    "message": "Expected an error object to be thrown.",
    "messageId": "object",
    "nodeType": "ThrowStatement",
    "ruleId": "no-throw-literal",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 17,
    "endLine": 350,
    "line": 350,
    "message": "Do not throw undefined.",
    "messageId": "undef",
    "nodeType": "ThrowStatement",
    "ruleId": "no-throw-literal",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 12,
    "endLine": 351,
    "line": 351,
    "message": "Expected an error object to be thrown.",
    "messageId": "object",
    "nodeType": "ThrowStatement",
    "ruleId": "no-throw-literal",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 354,
    "line": 354,
    "message": "Expected an assignment or function call and instead saw an expression.",
    "nodeType": "ExpressionStatement",
    "ruleId": "no-unused-expressions",
    "severity": 2,
  },
  Object {
    "column": 7,
    "endColumn": 8,
    "endLine": 355,
    "line": 355,
    "message": "Expected an assignment or function call and instead saw an expression.",
    "nodeType": "ExpressionStatement",
    "ruleId": "no-unused-expressions",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 9,
    "endLine": 356,
    "line": 356,
    "message": "Expected an assignment or function call and instead saw an expression.",
    "nodeType": "ExpressionStatement",
    "ruleId": "no-unused-expressions",
    "severity": 2,
  },
  Object {
    "column": 23,
    "line": 359,
    "message": "Unexpected string concatenation of literals.",
    "nodeType": "BinaryExpression",
    "ruleId": "no-useless-concat",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 23,
    "endLine": 362,
    "line": 362,
    "message": "Unnecessary escape character: \\\\'.",
    "nodeType": "Literal",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 363,
    "line": 363,
    "message": "Unnecessary escape character: \\\\\\".",
    "nodeType": "Literal",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 364,
    "line": 364,
    "message": "Unnecessary escape character: \\\\#.",
    "nodeType": "Literal",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 365,
    "line": 365,
    "message": "Unnecessary escape character: \\\\e.",
    "nodeType": "Literal",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 366,
    "line": 366,
    "message": "Unnecessary escape character: \\\\\\".",
    "nodeType": "TemplateElement",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 367,
    "line": 367,
    "message": "Unnecessary escape character: \\\\\\".",
    "nodeType": "TemplateElement",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 26,
    "endColumn": 27,
    "endLine": 367,
    "line": 367,
    "message": "Unnecessary escape character: \\\\\\".",
    "nodeType": "TemplateElement",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 368,
    "line": 368,
    "message": "Unnecessary escape character: \\\\#.",
    "nodeType": "TemplateElement",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 369,
    "line": 369,
    "message": "Unnecessary escape character: \\\\!.",
    "nodeType": "Literal",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 370,
    "line": 370,
    "message": "Unnecessary escape character: \\\\@.",
    "nodeType": "Literal",
    "ruleId": "no-useless-escape",
    "severity": 2,
  },
  Object {
    "column": 31,
    "endColumn": 38,
    "endLine": 373,
    "fix": Object {
      "range": Array [
        5544,
        5583,
      ],
      "text": "function uselessReturnOne() {  }",
    },
    "line": 373,
    "message": "Unnecessary return statement.",
    "nodeType": "ReturnStatement",
    "ruleId": "no-useless-return",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 10,
    "endLine": 377,
    "fix": Object {
      "range": Array [
        5585,
        5643,
      ],
      "text": "function uselessReturnTwo() {
  doSomething();
  
}",
    },
    "line": 377,
    "message": "Unnecessary return statement.",
    "nodeType": "ReturnStatement",
    "ruleId": "no-useless-return",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 9,
    "endLine": 381,
    "line": 381,
    "message": "Expected 'undefined' and instead saw 'void'.",
    "nodeType": "UnaryExpression",
    "ruleId": "no-void",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 9,
    "endLine": 384,
    "line": 384,
    "message": "Unexpected 'todo' comment.",
    "nodeType": "Line",
    "ruleId": "no-warning-comments",
    "severity": 1,
  },
  Object {
    "column": 1,
    "endColumn": 10,
    "endLine": 385,
    "line": 385,
    "message": "Unexpected 'fixme' comment.",
    "nodeType": "Line",
    "ruleId": "no-warning-comments",
    "severity": 1,
  },
  Object {
    "column": 1,
    "endColumn": 8,
    "endLine": 386,
    "line": 386,
    "message": "Unexpected 'fix' comment.",
    "nodeType": "Line",
    "ruleId": "no-warning-comments",
    "severity": 1,
  },
  Object {
    "column": 1,
    "endColumn": 8,
    "endLine": 387,
    "line": 387,
    "message": "Unexpected 'xxx' comment.",
    "nodeType": "Line",
    "ruleId": "no-warning-comments",
    "severity": 1,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 392,
    "line": 390,
    "message": "Unexpected use of 'with' statement.",
    "nodeType": "WithStatement",
    "ruleId": "no-with",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 23,
    "endLine": 395,
    "line": 395,
    "message": "Expected the Promise rejection reason to be an Error.",
    "nodeType": "CallExpression",
    "ruleId": "prefer-promise-reject-errors",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 13,
    "endLine": 398,
    "line": 398,
    "message": "Expected the Promise rejection reason to be an Error.",
    "nodeType": "CallExpression",
    "ruleId": "prefer-promise-reject-errors",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 35,
    "endLine": 402,
    "line": 402,
    "message": "Missing radix parameter.",
    "nodeType": "CallExpression",
    "ruleId": "radix",
    "severity": 2,
  },
  Object {
    "column": 16,
    "endColumn": 35,
    "endLine": 403,
    "line": 403,
    "message": "Missing radix parameter.",
    "nodeType": "CallExpression",
    "ruleId": "radix",
    "severity": 2,
  },
  Object {
    "column": 16,
    "endColumn": 38,
    "endLine": 404,
    "line": 404,
    "message": "Invalid radix parameter.",
    "nodeType": "CallExpression",
    "ruleId": "radix",
    "severity": 2,
  },
  Object {
    "column": 16,
    "endColumn": 26,
    "endLine": 405,
    "line": 405,
    "message": "Missing parameters.",
    "nodeType": "CallExpression",
    "ruleId": "radix",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 27,
    "endLine": 408,
    "line": 408,
    "message": "All 'var' declarations must be at the top of the function scope.",
    "messageId": "top",
    "nodeType": "VariableDeclaration",
    "ruleId": "vars-on-top",
    "severity": 2,
  },
  Object {
    "column": 2,
    "endColumn": 18,
    "endLine": 411,
    "fix": Object {
      "range": Array [
        6137,
        6141,
      ],
      "text": ") ()",
    },
    "line": 411,
    "message": "Wrap only the function expression in parens.",
    "messageId": "wrapExpression",
    "nodeType": "CallExpression",
    "ruleId": "wrap-iife",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 18,
    "endLine": 414,
    "fix": Object {
      "range": Array [
        6156,
        6169,
      ],
      "text": "flag === true",
    },
    "line": 414,
    "message": "Expected literal to be on the right side of ===.",
    "messageId": "expected",
    "nodeType": "BinaryExpression",
    "ruleId": "yoda",
    "severity": 2,
  },
]
`;

exports[`ESLint best practices should pass 1`] = `Array []`;
